import { AgGridModule } from 'ag-grid-angular'; @NgModule({ // Other module metadata imports: [ // Other imported modules AgGridModule.withComponents([]) ] }) export class AppModule { }
4. In the component that will display the grid, import the AgGridAngular component and add it to the template.

Copy code
import { AgGridAngular } from 'ag-grid-angular'; @Component({ selector: 'app-pnl-grid', template: ` <ag-grid-angular style="width: 100%; height: 100%;" class="ag-theme-balham" [rowData]="rowData" [columnDefs]="columnDefs" [pagination]="true" [paginationPageSize]="10"> </ag-grid-angular> ` }) export class PnlGridComponent { @ViewChild('agGrid') agGrid: AgGridAngular; // Other component properties and methods }
5. In the component class, define the rowData and columnDefs properties that will be used by the grid. You can set the initial values to an empty array, and then populate them with data from the API later on.

Copy code
export class PnlGridComponent { // Other component properties and methods rowData: any[] = []; columnDefs: any[] = []; }

const columnDefs = Object.keys(rows[0]).map(key => {
          return {headerName: key, field: key};
        });

        // Set the grid options
        this.agGrid.gridOptions = {
          columnDefs: columnDefs,
          rowData: rows
        };
      });
  }
}

// Generate the column definitions from the first row of data
        const columnDefs = Object.keys(rows[0]).map(key => {
          return {headerName: key, field: key};
        });

        // Set the grid options
        this.agGrid.gridOptions = {
          columnDefs: columnDefs,
          rowData: rows
        };
      });


this.columns$.subscribe((columns) => {
  // Function to find and remove the column with the specified field from the array
  const findAndRemoveColumn = (field) => {
    const index = columns.findIndex((column) => column.field === field);
    if (index !== -1) {
      return columns.splice(index, 1)[0];
    }
    return null;
  };

  // Find and remove 'rtpl' and 'hyponl' columns from the array
  const rtplColumn = findAndRemoveColumn('rtpl');
  const hyponlColumn = findAndRemoveColumn('hyponl');

  // Insert 'rtpl' and 'hyponl' columns at positions 6 and 7, respectively, if they exist
  if (rtplColumn) {
    columns.splice(5, 0, rtplColumn); // 5 is the index for 6th position, as the array is 0-indexed
  }
  if (hyponlColumn) {
    columns.splice(6, 0, hyponlColumn); // 6 is the index for 7th position, as the array is 0-indexed
  }

  // Create column definitions for the modified columns array
  columns.forEach((c) => columnDef.push(makeColumnDefinition(c)));
});





@Component({
    selector: 'app-data-grid',
    template: `
        <ag-grid-angular 
            [rowData]="rowData" 
            [columnDefs]="columnDefs"
            [rowModelType]="'serverSide'"
            [paginationPageSize]="pageSize"
            [cacheBlockSize]="cacheBlockSize"
            (modelUpdated)="onModelUpdated($event)">
        </ag-grid-angular>
    `
})
export class DataGridComponent {
    columnDefs = [
        {
            headerName: 'Name',
            field: 'name',
            enableRowGroup: true
        },
        {
            headerName: 'Category',
            field: 'category',
            enableRowGroup: true
        },
        {
            headerName: 'Price',
            field: 'price',
            enablePivot: true
        }
    ];
    rowData: any[];
    pageSize = 10;
    cacheBlockSize = 10;

    constructor(private http: HttpClient) {}

    ngOnInit() {
        this.http.get('/data', { params: { page: 0, size: this.pageSize }})
            .subscribe(data => {
                this.rowData = data;
            });
    }

    onModelUpdated(event: any) {
        const page = event.api.paginationGetCurrentPage();
        const size = event.api.paginationGetPageSize();
        const pivotColumn = event.api.columnApi.getPivotColumns()[0];

        // Fetch pivoted data from the server
        this.http.get('/data', { params: { page, size, pivotColumn }})
            .subscribe(data => {
                event.api.setRowData(data);
            });
    }
}



import { Injectable } from '@angular/core';
import { createSelector, createFeatureSelector, Store, select } from '@ngrx/store';

export interface SpringPageState {
  data: any[];
  totalPages: number;
  pageSize: number;
  currentPage: number;
}

const initialState: SpringPageState = {
  data: [],
  totalPages: 0,
  pageSize: 0,
  currentPage: 0
};

export const selectSpringPageState = createFeatureSelector<SpringPageState>('springPage');

@Injectable({
  providedIn: 'root'
})
export class SpringPageStore {
  constructor(private store: Store<SpringPageState>) {}

  get state() {
    return this.store.pipe(select(selectSpringPageState));
  }

  updatePage(page: number) {
    // Dispatch an


this.columns$.subscribe((columns) => {
  // Custom sorting function to position 'rtpl' and 'hyponl' at positions 6 and 7
  const sortedColumns = columns.sort((a, b) => {
    if (a.field === 'rtpl') return -1;
    if (b.field === 'rtpl') return 1;
    if (a.field === 'hyponl' && b.field !== 'rtpl') return -1;
    if (b.field === 'hyponl' && a.field !== 'rtpl') return 1;
    return 0;
  });

  // Create column definitions for sorted columns
  sortedColumns.forEach((c) => columnDef.push(makeColumnDefinition(c)));
});

this.columns$.subscribe((columns) => {
  // Function to find and remove the column with the specified field from the array
  const findAndRemoveColumn = (field) => {
    const index = columns.findIndex((column) => column.field === field);
    if (index !== -1) {
      return columns.splice(index, 1)[0];
    }
    return null;
  };

  // Find and remove 'rtpl' and 'hyponl' columns from the array
  const rtplColumn = findAndRemoveColumn('rtpl');
  const hyponlColumn = findAndRemoveColumn('hyponl');

  // Insert 'rtpl' and 'hyponl' columns at positions 6 and 7, respectively, if they exist
  if (rtplColumn) {
    columns.splice(5, 0, rtplColumn); // 5 is the index for 6th position, as the array is 0-indexed
  }
  if (hyponlColumn) {
    columns.splice(6, 0, hyponlColumn); // 6 is the index for 7th position, as the array is 0-indexed
  }

  // Create column definitions for the modified columns array
  columns.forEach((c) => columnDef.push(makeColumnDefinition(c)));
});

