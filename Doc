@Override
    public Mono<Void> filter(ServerWebExchange exchange, WebFilterChain chain) {
        if (exchange.getRequest().getURI().getPath().contains(SWAGGER_CONFIG_API_PATH)) {
            ServerHttpResponse originalResponse = exchange.getResponse();
            ServerHttpResponseDecorator decoratedResponse = new ServerHttpResponseDecorator(originalResponse) {
                @Override
                public Mono<Void> writeWith(Flux<? extends DataBuffer> body) {
                    Flux<DataBuffer> modifiedBody = body.map(dataBuffer -> {
                        // Read the dataBuffer into a String
                        String responseBody = StandardCharsets.UTF_8.decode(dataBuffer.asByteBuffer()).toString();
                        // Release the dataBuffer to prevent memory leaks
                        DataBufferUtils.release(dataBuffer);
                        
                        // Modify the responseBody as needed
                        String modifiedResponse = modifyResponseBody(responseBody, exchange.getRequest().getHeaders().get(REQUEST_HEADER_ORIGINAL_HOST));
                        
                        // Convert the modified response back into a DataBuffer
                        byte[] bytes = modifiedResponse.getBytes(StandardCharsets.UTF_8);
                        return originalResponse.bufferFactory().wrap(bytes);
                    });

                    // Write the modified body
                    return super.writeWith(modifiedBody);
                }
            };

            // Continue the filter chain with the decorated response
            return chain.filter(exchange.mutate().response(decoratedResponse).build());
        }

        // If the URI path does not contain the Swagger config path, continue the filter chain normally
        return chain.filter(exchange);
    }

    private String modifyResponseBody(String responseBody, List<String> originalHosts) {
        // Replace the dynamic placeholder with the original host from the request headers
        if (originalHosts != null && !originalHosts.isEmpty()) {
            return responseBody.replace(DYNAMIC_PLACEHOLDER, originalHosts.get(0));
        }
        return responseBody;
    }
}


