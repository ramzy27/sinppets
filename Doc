@Override
    public Mono<Void> filter(ServerWebExchange exchange, WebFilterChain chain) {
        if (exchange.getRequest().getURI().getPath().contains(SWAGGER_CONFIG_API_PATH)) {
            ServerHttpResponse originalResponse = exchange.getResponse();
            ServerHttpResponseDecorator decoratedResponse = new ServerHttpResponseDecorator(originalResponse) {
                @Override
                public Mono<Void> writeWith(Publisher<? extends DataBuffer> body) {
                    if (body instanceof Flux) {
                        Flux<? extends DataBuffer> fluxBody = (Flux<? extends DataBuffer>) body;
                        return super.writeWith(fluxBody.buffer().map(dataBuffers -> {
                            String originalBody = dataBuffers.stream()
                                .map(dataBuffer -> StandardCharsets.UTF_8.decode(dataBuffer.asByteBuffer()).toString())
                                .collect(Collectors.joining());
                            dataBuffers.forEach(DataBufferUtils::release);

                            // Replace the dynamic placeholder with the original host
                            String originalHost = exchange.getRequest().getHeaders().getFirst(REQUEST_HEADER_ORIGINAL_HOST);
                            String modifiedBody = originalBody.replace(DYNAMIC_PLACEHOLDER, originalHost != null ? originalHost : "localhost");

                            // Return the new DataBuffer
                            byte[] bytes = modifiedBody.getBytes(StandardCharsets.UTF_8);
                            return originalResponse.bufferFactory().wrap(bytes);
                        }));
                    } else {
                        // If the body is not a Flux (it is a Mono), we deal with it separately
                        return Mono.from(body)
                            .flatMap(dataBuffer -> {
                                String originalBody = StandardCharsets.UTF_8.decode(dataBuffer.asByteBuffer()).toString();
                                DataBufferUtils.release(dataBuffer);

                                // Replace the dynamic placeholder with the original host
                                String originalHost = exchange.getRequest().getHeaders().getFirst(REQUEST_HEADER_ORIGINAL_HOST);
                                String modifiedBody = originalBody.replace(DYNAMIC_PLACEHOLDER, originalHost != null ? originalHost : "localhost");

                                // Return the new DataBuffer
                                byte[] bytes = modifiedBody.getBytes(StandardCharsets.UTF_8);
                                return Mono.just(originalResponse.bufferFactory().wrap(bytes));
                            })
                            .flatMap(decoratedResponse::writeWith);
                    }
                }
            };
            return chain.filter(exchange.mutate().response(decoratedResponse).build());
        }
        return chain.filter(exchange);
    }
}
