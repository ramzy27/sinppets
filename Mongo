dedb.EPI.aggregate([
   {
      $match: {
         quantity: {$ne: 0}
      }
   },
   {
      $lookup: {
         from: "Instruments",
         localField: "instrumentId",
         foreignField: "instrumentId",
         as: "instrument_details"
      }
   },
   {
      $unwind: "$instrument_details"
   },
   {
      $lookup: {
         from: "Underlyings",
         localField: "instrument_details.jobuuid",
         foreignField: "jobuuid",
         as: "underlying_details"
      }
   },
   {
      $unwind: "$underlying_details"
   },
   {
      $match: {
         "underlying_details.underlyingCode": {$in: [<list of underlyings>]}
      }
   },
   {
      $group: {
         _id: "$underlying_details.underlyingCode",
         total_quantity: {$sum: "$quantity"}
      }
   }
])




db.EPI.aggregate([
   {
      $match: {
         quantity: {$ne: 0}
      }
   },
   {
      $lookup: {
         from: "Instruments",
         let: { instrumentId: "$instrumentId" },
         pipeline: [
            {
               $match: {
                  $expr: {
                     $eq: ["$instrumentId", "$$instrumentId"]
                  }
               }
            }
         ],
         as: "instrument_details"
      }
   },
   {
      $unwind: "$instrument_details"
   },
   {
      $lookup: {
         from: "Underlyings",
         let: { jobuuid: "$instrument_details.jobuuid" },
         pipeline: [
            {
               $match: {
                  $expr: {
                     $eq: ["$jobuuid", "$$jobuuid"]
                  }
               }
            }
         ],
         as: "underlying_details"
      }
   },
   {
      $unwind: "$underlying_details"
   },
   {
      $match: {
         "underlying_details.underlyingCode": {$in: [<list of underlyings>]}
      }
   },
   {
      $group: {
         _id: "$underlying_details.underlyingCode",
         total_quantity: {$sum: "$quantity"}
      }
   }
])


db.EPI.aggregate([
   {
      $match: {
         quantity: { $ne: 0 }
      }
   },
   {
      $addFields: {
         instrument_details: {
            $map: {
               input: "$instrumentId",
               as: "instrumentId",
               in: {
                  $arrayElemAt: [
                     {
                        $filter: {
                           input: "$$ROOT.Instruments",
                           cond: { $eq: ["$$this.instrumentId", "$$instrumentId"] }
                        }
                     },
                     0
                  ]
               }
            }
         }
      }
   },
   {
      $unwind: "$instrument_details"
   },
   {
      $addFields: {
         underlying_details: {
            $arrayElemAt: [
               {
                  $filter: {
                     input: "$$ROOT.Underlyings",
                     cond: { $eq: ["$$this.jobuuid", "$instrument_details.jobuuid"] }
                  }
               },
               0
            ]
         }
      }
   },
   {
      $match: {
         "underlying_details.underlyingCode": { $in: [<list of underlyings>] }
      }
   },
   {
      $group: {
         _id: "$underlying_details.underlyingCode",
         total_quantity: { $sum: "$quantity" }
      }
   }
])





db.RiskResults.aggregate([
   {
      $match: {
         "folio.qty": { $ne: 0 }
      }
   },
   {
      $match: {
         "underlying.code": { $in: [<list of underlyings>] }
      }
   },
   {
      $group: {
         _id: "$underlying.code",
         total_quantity: { $sum: "$folio.qty" }
      }
   }
])



db.getCollection('risk').aggregate([
  {
    $group: {
      _id: null,
      processIdSize: {
        $sum: {
          $cond: [
            { $isArray: "$processId" },
            { $sum: { $map: { input: "$processId", in: { $bsonSize: "$$this" } } } },
            { $bsonSize: "$processId" }
          ]
        }
      }
    }
  },
  {
    $project: {
      _id: 0,
      processIdSize: 1
    }
  }
])

db.getCollection('risk').aggregate([
  {
    $match: {
      processId: { $in: [123, 34, 43] },
      rollDate: '20230202'
    }
  },
  {
    $project: {
      documentSize: { $bsonSize: "$$ROOT" }
    }
  },
  {
    $group: {
      _id: null,
      totalSize: { $sum: "$documentSize" }
    }
  },
  {
    $project: {
      _id: 0,
      totalSize: 1
    }
  }
])


db.collection.updateMany(
   { rolldate: 20230314 },
   {
      $set: {
         expireAt: new Date("2023-03-31T00:00:00Z")
      }
   }
)

var batchSize = 1000;
var count = db.collection.count({ rolldate: 20230314 });
var numBatches = Math.ceil(count / batchSize);

for (var i = 0; i < numBatches; i++) {
   var cursor = db.collection.find({ rolldate: 20230314 }).skip(i * batchSize).limit(batchSize);

   var bulk = db.collection.initializeUnorderedBulkOp();

   cursor.forEach(function(doc) {
      bulk.find({ _id: doc._id }).updateOne({
         $set: {
            expireAt: new Date("2023-03-31T00:00:00Z")
         }
      });
   });

   bulk.execute();
}
db.getCollection("RiskResult").find({instrument: {$in: [11, 12, 45]}}).projection({_id: 1, instrument: 1}).toCsv()
// Replace 0 with the appropriate chunk number (e.g., 0, 1000, 2000, etc.)
var skipAmount = 0;
var limitAmount = 1000;
db.getCollection("RiskResult").find({instrument: {$in: [11, 12, 45]}}).skip(skipAmount).limit(limitAmount).toCsv()


db.risk.aggregate([
  {
    $match: {
      "metrics.k": "eqvega"
    }
  },
{
    $group: {
      _id: {
        positionId: "$riskSource.position.positionId",
        eqvega: {
          $arrayElemAt: [
            {
              $map: {
                input: {
                  $filter: {
                    input: "$metrics",
                    as: "metric",
                    cond: { $eq: ["$$metric.k", "eqvega"] }
                  }
                },
                as: "filteredMetric",
                in: "$$filteredMetric.v"
              }
            },
            0
          ]
        },
        riskScenarioName: "$riskScenario.name"
      }
    }
  },
  {
    $project: {
      _id: 0,
      positionId: "$_id.positionId",
      eqvega: "$_id.eqvega",
      riskScenarioName: "$_id.riskScenarioName"
    }
  }
])


db.RiskResult.aggregate([
  {
    $match: {
      "aggregationLevel": "Position",
      "position.epi": 17472,
      "rolldate": {
        $gte: 20230720, // Adjust this to the start date of last week
        $lte: 20230727  // Adjust this to the end date of last week
      },
      "riskScenario.spotShift": 0.0,
      "riskScenario.volShift": 0.0
    }
  },
  { $unwind: "$metrics" },
  {
    $match: {
      "metrics.k": "mtm"
    }
  },
  {
    $project: {
      mtm: "$metrics.v"
    }
  }
]);


db.RiskResult.find({
  "aggregationLevel": "Position",
  "position.epi": 17472,
  "rolldate": {
    $gte: 20230720, // Adjust this to the start date of last week
    $lte: 20230727  // Adjust this to the end date of last week
  },
  "riskScenario.spotShift": 0.0,
  "riskScenario.volShift": 0.0
},
{
  _id: 0,
  rolldate: 1,
  metrics: {
    $elemMatch: {
      "k": "mtm"
    }
  }
});


