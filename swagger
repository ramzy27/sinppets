@Configuration
public class OpenApiConfiguration {

    @Value("${spring.security.oauth2.client.provider.keycloak.token-uri}")
    private String authServerUrl;

    @Value("${spring.security.oauth2.client.registration.keycloak.client-id}")
    private String clientId;

    @Value("${spring.security.oauth2.client.registration.keycloak.client-secret}")
    private String clientSecret;

    @Bean
    public OpenAPI customOpenAPI() {
        return new OpenAPI()
                .addSecurityItem(new SecurityRequirement().addList("OAuth2"))
                .components(new Components()
                        .addSecuritySchemes("OAuth2",
                                new SecurityScheme()
                                        .type(SecurityScheme.Type.OAUTH2)
                                        .in(SecurityScheme.In.HEADER)
                                        .scheme("bearer")
                                        .flows(new OAuthFlows()
                                                .password(new OAuthFlow()
                                                        .tokenUrl(authServerUrl)
                                                        .authorizationUrl(authServerUrl + "/auth")
                                                        .addScopesItem("openid", "openid scope")
                                                        .addScopesItem("profile", "profile scope")
                                                )
                                        )
                        )
                );
    }
}


To integrate OAuth2 into Swagger UI, you can use the following steps:

Firstly, add Swagger UI dependencies in your Maven `pom.xml` file:

```xml
<dependency>
    <groupId>io.springfox</groupId>
    <artifactId>springfox-swagger2</artifactId>
    <version>2.9.2</version>
</dependency>
<dependency>
    <groupId>io.springfox</groupId>
    <artifactId>springfox-swagger-ui</artifactId>
    <version>2.9.2</version>
</dependency>
```

Secondly, define a `Docket` Bean and configure Swagger UI for OAuth2 in a configuration class:

```java
@Configuration
@EnableSwagger2
public class SwaggerConfig {

    @Value("${keycloak.auth-server-url}")
    private String authServerUrl;

    @Value("${keycloak.realm}")
    private String realm;

    @Value("${keycloak.resource}")
    private String clientId;

    @Bean
    public Docket api() {
        return new Docket(DocumentationType.SWAGGER_2)
            .select()
            .apis(RequestHandlerSelectors.any())
            .paths(PathSelectors.any())
            .build()
            .securitySchemes(Arrays.asList(securityScheme()))
            .securityContexts(Arrays.asList(securityContext()));
    }

    private SecurityScheme securityScheme() {
        GrantType grantType =
                new ResourceOwnerPasswordCredentialsGrant(authServerUrl + "/realms/" + realm + "/protocol/openid-connect/token");

        SecurityScheme oauth =
                new OAuthBuilder()
                        .name("spring_oauth")
                        .grantTypes(Arrays.asList(grantType))
                        .scopes(Arrays.asList(scopes()))
                        .build();
        return oauth;
    }

    private SecurityContext securityContext() {
        return SecurityContext.builder()
                .securityReferences(Arrays.asList(new SecurityReference("spring_oauth", scopes())))
                .forPaths(PathSelectors.any())
                .build();
    }

    private AuthorizationScope[] scopes() {
        AuthorizationScope[] scopes = {
            new AuthorizationScope("read", "for read operations"),
            new AuthorizationScope("write", "for write operations"),
            new AuthorizationScope("trust", "for trust operations")
        };
        return scopes;
    }
}
```

Thirdly, allow Swagger UI through your Security configuration:

```java
@Configuration
@EnableWebSecurity
public class SecurityConfig extends WebSecurityConfigurerAdapter {

    @Override
    public void configure(WebSecurity web) throws Exception {
        web.ignoring().antMatchers("/v2/api-docs",
                                   "/configuration/ui",
                                   "/swagger-resources/**",
                                   "/configuration/security",
                                   "/swagger-ui.html",
                                   "/webjars/**");
    }
}
```

When you open Swagger UI, you will see an "Authorize" button, you can click on it and input the necessary OAuth2 credentials to authenticate.

Please be aware that this is just a general guide and you may need to adjust the configuration according to your specific requirements.



When you use Springdoc OpenAPI, you can integrate OAuth2 into your Swagger UI using the following approach:

First, add the Springdoc OpenAPI UI dependency in your `pom.xml` file:

```xml
<dependency>
    <groupId>org.springdoc</groupId>
    <artifactId>springdoc-openapi-ui</artifactId>
    <version>1.5.2</version>
</dependency>
```

Next, configure OAuth2 in your OpenAPI configuration:

```java
@Configuration
public class OpenApiConfiguration {

    @Value("${keycloak.auth-server-url}")
    private String authServerUrl;

    @Value("${keycloak.realm}")
    private String realm;

    @Value("${keycloak.resource}")
    private String clientId;

    @Bean
    public OpenAPI customOpenAPI() {
        final String securitySchemeName = "bearerAuth";
        return new OpenAPI()
                .addSecurityItem(new SecurityRequirement().addList(securitySchemeName))
                .components(
                        new Components()
                                .addSecuritySchemes(securitySchemeName,
                                        new SecurityScheme()
                                                .name(securitySchemeName)
                                                .type(SecurityScheme.Type.HTTP)
                                                .scheme("bearer")
                                                .bearerFormat("JWT")
                                                .in(SecurityScheme.In.HEADER)
                                                .description("JWT Authorization header using the Bearer scheme")
                                )
                )
                .info(new Info().title("Your API Title").version("v1")
                        .description("Your API Description"));
    }
}
```

This setup will add an "Authorize" button to your Swagger UI, allowing you to authenticate using your OAuth2 credentials.

Please adjust this configuration according to your specific needs.

Regarding accessing Swagger without a bearer token, you would need to make sure that your security configuration is allowing access to the paths that Swagger is using. Please review your security configuration to ensure paths related to Swagger are permitted.

Lastly, remember to update your Spring Security configuration to allow Swagger UI-related paths (replace "/swagger-ui.html" with "/swagger-ui/" if you're using Springdoc OpenAPI). For example:

```java
@Configuration
public class SecurityConfig extends WebSecurityConfigurerAdapter {

    @Override
    public void configure(WebSecurity web) throws Exception {
        web.ignoring().antMatchers("/swagger-ui/**",
                                   "/v3/api-docs/**",
                                   "/swagger-ui.html",
                                   "/webjars/**");
    }
}
```

