Before proceeding, it's important to note that not all Kubernetes Ingress Controllers support the `use-forwarded-headers` and `proxy-real-ip-cidr` options. These options are specific to the NGINX Ingress Controller. If you're using a different Ingress Controller, such as the default GCE Ingress Controller in GKE, these options may not be available. 

Assuming you're using the NGINX Ingress Controller, here's how you might modify its ConfigMap:

1. First, find the name of the ConfigMap for the NGINX Ingress Controller. It's often something like `nginx-configuration` or `nginx-config`, but it might vary depending on your setup. You can list all ConfigMaps in the `ingress-nginx` namespace (if that's where your Ingress Controller is installed) with this command:

   ```bash
   kubectl get configmap -n ingress-nginx
   ```

2. Once you have the name of the ConfigMap, you can edit it directly with `kubectl edit`:

   ```bash
   kubectl edit configmap nginx-configuration -n ingress-nginx
   ```

   This command will open the ConfigMap in your default text editor. Under the `data:` section, add the `use-forwarded-headers` and `proxy-real-ip-cidr` options:

   ```yaml
   data:
     use-forwarded-headers: "true"
     proxy-real-ip-cidr: "0.0.0.0/0"  # replace with your actual trusted IPs
   ```

   Save and close the file to apply the changes.

3. After editing the ConfigMap, you'll usually need to restart the Ingress Controller's Pods to make them pick up the changes. You can do this by deleting the Pods and letting the Deployment create new ones:

   ```bash
   kubectl delete pod -n ingress-nginx -l app.kubernetes.io/name=ingress-nginx
   ```

   Replace `ingress-nginx` with the actual namespace and label of your Ingress Controller's Pods if they're different.

Again, please note that the exact steps might vary depending on your specific setup and the type of Ingress Controller you're using. Always refer to the documentation for your specific Ingress Controller for the most accurate information.


resources:
  - "@type": type.googleapis.com/envoy.config.listener.v3.Listener
    name: listener_0
    address:
      socket_address:
        address: 0.0.0.0
        port_value: 8886
    filter_chains:
      - filters:
          - name: envoy.filters.network.http_connection_manager
            typed_config:
              "@type": type.googleapis.com/envoy.extensions.filters.network.http_connection_manager.v3.HttpConnectionManager
              stat_prefix: ingress_http
              route_config:
                name: local_route
                virtual_hosts:
                  - name: backend
                    domains: ["*"]
                    routes:
                      - match:
                          prefix: "/riskstore-gcp-api"
                        route:
                          cluster: riskstore-api
                          auto_host_rewrite: true
                          request_headers_to_add:
                            - header:
                                key: "X-Forwarded-Host"
                                value: "%REQ(:authority)%"
                            - header:
                                key: "X-Forwarded-Proto"
                                value: "%REQ(x-forwarded-proto)%"
                      # Add similar request_headers_to_add for other routes as needed
              http_filters:
                - name: envoy.filters.http.router




- name: envoy.filters.network.http_connection_manager
  typed_config:
    "@type": type.googleapis.com/envoy.extensions.filters.network.http_connection_manager.v3.HttpConnectionManager
    # ... other configs ...
    forward_client_cert_details: SANITIZE_SET
    set_current_client_cert_details:
      cert: true
      dns: true
      uri: true
    use_remote_address: true
    xff_num_trusted_hops: 1


@Configuration
public class OpenApiConfiguration {

    @Value("${spring.security.oauth2.client.provider.keycloak.token-uri}")
    private String authServerUrl;

    @Value("${spring.security.oauth2.client.registration.keycloak.client-id}")
    private String clientId;

    @Value("${spring.security.oauth2.client.registration.keycloak.client-secret}")
    private String clientSecret;

    @Bean
    public OpenAPI customOpenAPI() {
        return new OpenAPI()
                .addSecurityItem(new SecurityRequirement().addList("OAuth2"))
                .components(new Components()
                        .addSecuritySchemes("OAuth2",
                                new SecurityScheme()
                                        .type(SecurityScheme.Type.OAUTH2)
                                        .in(SecurityScheme.In.HEADER)
                                        .scheme("bearer")
                                        .flows(new OAuthFlows()
                                                .password(new OAuthFlow()
                                                        .tokenUrl(authServerUrl)
                                                        .authorizationUrl(authServerUrl + "/auth")
                                                        .addScopesItem("openid", "openid scope")
                                                        .addScopesItem("profile", "profile scope")
                                                )
                                        )
                        )
                );
    }
}


To integrate OAuth2 into Swagger UI, you can use the following steps:

Firstly, add Swagger UI dependencies in your Maven `pom.xml` file:

```xml
<dependency>
    <groupId>io.springfox</groupId>
    <artifactId>springfox-swagger2</artifactId>
    <version>2.9.2</version>
</dependency>
<dependency>
    <groupId>io.springfox</groupId>
    <artifactId>springfox-swagger-ui</artifactId>
    <version>2.9.2</version>
</dependency>
```

Secondly, define a `Docket` Bean and configure Swagger UI for OAuth2 in a configuration class:

```java
@Configuration
@EnableSwagger2
public class SwaggerConfig {

    @Value("${keycloak.auth-server-url}")
    private String authServerUrl;

    @Value("${keycloak.realm}")
    private String realm;

    @Value("${keycloak.resource}")
    private String clientId;

    @Bean
    public Docket api() {
        return new Docket(DocumentationType.SWAGGER_2)
            .select()
            .apis(RequestHandlerSelectors.any())
            .paths(PathSelectors.any())
            .build()
            .securitySchemes(Arrays.asList(securityScheme()))
            .securityContexts(Arrays.asList(securityContext()));
    }

    private SecurityScheme securityScheme() {
        GrantType grantType =
                new ResourceOwnerPasswordCredentialsGrant(authServerUrl + "/realms/" + realm + "/protocol/openid-connect/token");

        SecurityScheme oauth =
                new OAuthBuilder()
                        .name("spring_oauth")
                        .grantTypes(Arrays.asList(grantType))
                        .scopes(Arrays.asList(scopes()))
                        .build();
        return oauth;
    }

    private SecurityContext securityContext() {
        return SecurityContext.builder()
                .securityReferences(Arrays.asList(new SecurityReference("spring_oauth", scopes())))
                .forPaths(PathSelectors.any())
                .build();
    }

    private AuthorizationScope[] scopes() {
        AuthorizationScope[] scopes = {
            new AuthorizationScope("read", "for read operations"),
            new AuthorizationScope("write", "for write operations"),
            new AuthorizationScope("trust", "for trust operations")
        };
        return scopes;
    }
}
```

Thirdly, allow Swagger UI through your Security configuration:

```java
@Configuration
@EnableWebSecurity
public class SecurityConfig extends WebSecurityConfigurerAdapter {

    @Override
    public void configure(WebSecurity web) throws Exception {
        web.ignoring().antMatchers("/v2/api-docs",
                                   "/configuration/ui",
                                   "/swagger-resources/**",
                                   "/configuration/security",
                                   "/swagger-ui.html",
                                   "/webjars/**");
    }
}
```

When you open Swagger UI, you will see an "Authorize" button, you can click on it and input the necessary OAuth2 credentials to authenticate.

Please be aware that this is just a general guide and you may need to adjust the configuration according to your specific requirements.



When you use Springdoc OpenAPI, you can integrate OAuth2 into your Swagger UI using the following approach:

First, add the Springdoc OpenAPI UI dependency in your `pom.xml` file:

```xml
<dependency>
    <groupId>org.springdoc</groupId>
    <artifactId>springdoc-openapi-ui</artifactId>
    <version>1.5.2</version>
</dependency>
```

Next, configure OAuth2 in your OpenAPI configuration:

```java
@Configuration
public class OpenApiConfiguration {

    @Value("${keycloak.auth-server-url}")
    private String authServerUrl;

    @Value("${keycloak.realm}")
    private String realm;

    @Value("${keycloak.resource}")
    private String clientId;

    @Bean
    public OpenAPI customOpenAPI() {
        final String securitySchemeName = "bearerAuth";
        return new OpenAPI()
                .addSecurityItem(new SecurityRequirement().addList(securitySchemeName))
                .components(
                        new Components()
                                .addSecuritySchemes(securitySchemeName,
                                        new SecurityScheme()
                                                .name(securitySchemeName)
                                                .type(SecurityScheme.Type.HTTP)
                                                .scheme("bearer")
                                                .bearerFormat("JWT")
                                                .in(SecurityScheme.In.HEADER)
                                                .description("JWT Authorization header using the Bearer scheme")
                                )
                )
                .info(new Info().title("Your API Title").version("v1")
                        .description("Your API Description"));
    }
}
```

This setup will add an "Authorize" button to your Swagger UI, allowing you to authenticate using your OAuth2 credentials.

Please adjust this configuration according to your specific needs.

Regarding accessing Swagger without a bearer token, you would need to make sure that your security configuration is allowing access to the paths that Swagger is using. Please review your security configuration to ensure paths related to Swagger are permitted.

Lastly, remember to update your Spring Security configuration to allow Swagger UI-related paths (replace "/swagger-ui.html" with "/swagger-ui/" if you're using Springdoc OpenAPI). For example:

```java
@Configuration
public class SecurityConfig extends WebSecurityConfigurerAdapter {

    @Override
    public void configure(WebSecurity web) throws Exception {
        web.ignoring().antMatchers("/swagger-ui/**",
                                   "/v3/api-docs/**",
                                   "/swagger-ui.html",
                                   "/webjars/**");
    }
}
```

logging.level.org.springframework.web.servlet.DispatcherServlet=DEBUG


Host: proxy.com
X-Forwarded-Host: proxy.com
X-Forwarded-Proto: https (or http if your proxy is not using SSL)


@Configuration
@EnableGlobalMethodSecurity(prePostEnabled = true)
public class SecurityConfig extends WebSecurityConfigurerAdapter {

    @Value("#{'${allowed.roles}'.split(',')}")
    private List<String> allowedRoles;

    @Override
    protected void configure(HttpSecurity http) throws Exception {
        http
            .authorizeRequests()
            .antMatchers("/**").access("hasAnyRole(@allowedRoles)")
            .and()
            // Other configurations ...

            // Expose the allowedRoles list as a bean to be accessible in SpEL
            .expressionHandler(webSecurityExpressionHandler());
    }

    @Bean
    public WebSecurityExpressionHandler webSecurityExpressionHandler() {
        DefaultWebSecurityExpressionHandler handler = new DefaultWebSecurityExpressionHandler();
        handler.setApplicationContext(applicationContext);
        return handler;
    }

    @Autowired
    private ApplicationContext applicationContext;
}
