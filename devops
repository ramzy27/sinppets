etLet's break this down into several parts:

**1. Modify `pom.xml` in your Spring Boot application:**

Include the `spring-boot-maven-plugin` with layering enabled. You can also add the `maven-assembly-plugin` to package your project as a ZIP file.

```xml
<project>
  ...
  <build>
    <plugins>
      ...
      <plugin>
        <groupId>org.springframework.boot</groupId>
        <artifactId>spring-boot-maven-plugin</artifactId>
        <configuration>
          <layers>
            <enabled>true</enabled>
          </layers>
        </configuration>
        <executions>
          <execution>
            <goals>
              <goal>repackage</goal>
            </goals>
          </execution>
        </executions>
      </plugin>
      <plugin>
        <artifactId>maven-assembly-plugin</artifactId>
        <configuration>
          <descriptorRefs>
            <descriptorRef>jar-with-dependencies</descriptorRef>
          </descriptorRefs>
          <archive>
            <format>zip</format>
          </archive>
        </configuration>
        <executions>
          <execution>
            <phase>package</phase>
            <goals>
              <goal>single</goal>
            </goals>
          </execution>
        </executions>
      </plugin>
      ...
    </plugins>
  </build>
</project>
```

This will create a layered JAR and a ZIP file when you run `mvn package`.

**2. Create a generic Dockerfile:**

Place this Dockerfile in your platform builder repository. This Dockerfile is generic and can be used for all of your Spring Boot applications.

```Dockerfile
# Use a base image with Java 11
FROM adoptopenjdk:11-jdk-hotspot as builder

# Work with /app directory
WORKDIR /app

# Copy the JAR file
COPY target/*.jar application.jar

# Extract the layers
RUN java -Djarmode=layertools -jar application.jar extract

# Use a base image with Java 11 for the final image
FROM adoptopenjdk:11-jdk-hotspot

# Work with /app directory
WORKDIR /app

# Copy the layers from the builder image
COPY --from=builder /app/dependencies/ ./
COPY --from=builder /app/spring-boot-loader/ ./
COPY --from=builder /app/snapshot-dependencies/ ./
COPY --from=builder /app/application/ ./

# Run the application
ENTRYPOINT ["java", "org.springframework.boot.loader.JarLauncher"]
```

**3. Helm values files:**

Place your Helm values files in your application repositories. These files contain configuration values that are specific to each application. Here's an example `values.yaml` file:

```yaml
replicaCount: 1

image:
  repository: your-image-repo
  pullPolicy: IfNotPresent
  tag: ""

service:
  type: ClusterIP
  port: 8080

resources: {}

nodeSelector: {}

tolerations: []

affinity: {}
```

**4. Jenkins pipeline:**

Your Jenkins pipeline can be configured to:

- Pull the ZIP file from Nexus.
- Unzip the file and build the Docker image using the generic Dockerfile from your platform builder repository.
- Push the Docker image to your container registry.
- Use Helm to deploy your application to your GKE cluster using the Helm chart and the values file from your application repository.

Here's a very simplified example of what your Jenkins pipeline script might look like:

```groovy
pipeline {
  agent any
  stages {
    stage('Pull ZIP from Nexus') {
      steps {

<build>
    <plugins>
        <plugin>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-maven-plugin</artifactId>
            <configuration>
                <layers>
                    <enabled>true</enabled>
                </layers>
            </configuration>
        </plugin>
        <plugin>
            <artifactId>maven-assembly-plugin</artifactId>
            <version>3.3.0</version>
            <configuration>
                <descriptorRefs>
                    <descriptorRef>jar-with-dependencies</descriptorRef>
                </descriptorRefs>
                <finalName>${project.artifactId}-${project.version}</finalName>
                <appendAssemblyId>false</appendAssemblyId>
                <archive>
                    <manifest>
                        <mainClass>
                            <!-- Your main class here -->
                        </mainClass>
                    </manifest>
                </archive>
            </configuration>
            <executions>
                <execution>
                    <id>make-assembly</id>
                    <phase>package</phase>
                    <goals>
                        <goal>single</goal>
                    </goals>
                </execution>
            </executions>
        </plugin>
    </plugins>
</build>



<profiles>
    <profile>
        <id>jar</id>
        <build>
            <plugins>
                <plugin>
                    <groupId>org.springframework.boot</groupId>
                    <artifactId>spring-boot-maven-plugin</artifactId>
                    <configuration>
                        <layers>
                            <enabled>true</enabled>
                        </layers>
                    </configuration>
                    <executions>
                        <execution>
                            <goals>
                                <goal>repackage</goal>
                            </goals>
                        </execution>
                    </executions>
                </plugin>
            </plugins>
        </build>
    </profile>
    <profile>
        <id>zip</id>
        <build>
            <plugins>
                <plugin>
                    <artifactId>maven-assembly-plugin</artifactId>
                    <version>3.3.0</version>
                    <executions>
                        <execution>
                            <phase>package</phase>
                            <goals>
                                <goal>single</goal>
                            </goals>
                            <configuration>
                                <descriptorRefs>
                                    <descriptorRef>jar-with-dependencies</descriptorRef>
                                </descriptorRefs>
                                <finalName>${project.artifactId}</finalName>
                                <appendAssemblyId>false</appendAssemblyId>
                            </configuration>
                        </execution>
                    </executions>
                </plugin>
            </plugins>
        </build>
    </profile>
</profiles>

apiVersion: autoscaling/v1
kind: HorizontalPodAutoscaler
metadata:
  name: my-hpa
spec:
  scaleTargetRef:
    apiVersion: apps/v1
    kind: Deployment
    name: my-deployment
  minReplicas: 1
  maxReplicas: 10
  targetCPUUtilizationPercentage: 50



# Client properties
spring:
  security:
    oauth2:
      client:
        registration:
          myclient:
            client-id: myclient
            client-secret: mysecret
            authorization-grant-type: authorization_code
            redirect-uri: "{baseUrl}/login/oauth2/code/myclient"
            scope: openid

# Provider properties
spring:
  security:
    oauth2:
      client:
        provider:
          myprovider:
            issuer-uri: "http://localhost:8080/auth/realms/myrealm"

# Resource Server properties
spring:
  security:
    oauth2:
      resourceserver:
        jwt:
          issuer-uri: "http://localhost:8080/auth/realms/myrealm"
          
          
          
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import org.springframework.security.core.GrantedAuthority;
import org.springframework.security.core.authority.SimpleGrantedAuthority;
import org.springframework.security.oauth2.jwt.Jwt;
import org.springframework.security.oauth2.server.resource.authentication.JwtAuthenticationConverter;
import org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter;

import java.util.Collection;
import java.util.Collections;
import java.util.List;
import java.util.stream.Collectors;

@Configuration
public class OAuth2ResourceServerConfig {

    @Bean
    public JwtAuthenticationConverter jwtAuthenticationConverter() {
        JwtAuthenticationConverter jwtAuthenticationConverter = new JwtAuthenticationConverter();
        jwtAuthenticationConverter.setJwtGrantedAuthoritiesConverter(jwt -> {
            List<String> groups = jwt.getClaim("groups");
            if (groups == null) {
                return Collections.emptyList();
            }
            return groups.stream()
                    .map(group -> "ROLE_" + group.toUpperCase())
                    .map(SimpleGrantedAuthority::new)
                    .collect(Collectors.toList());
        });
        return jwtAuthenticationConverter;
    }
}


Here is a revised version with additional sections for the workflow and the Spring Boot Starter:

# Single Sign-On (SSO) Platform using Keycloak, LDAP, and Spring Boot

## Overview

This document provides a guide on how to set up an SSO platform using Keycloak as an Identity and Access Management solution, LDAP as a user directory, and Spring Boot for application development. The platform leverages OAuth2 and JWT (JSON Web Tokens) for secure communication. Once authenticated, applications grant access based on the user's LDAP group memberships. The goal is to create a common platform for OAuth2 authentication for all the organization's applications.

## Workflow

1. A user attempts to access a protected resource in a client application.
2. The application redirects the user to the Keycloak server for authentication.
3. Keycloak authenticates the user against the LDAP user directory and generates a JWT access token that includes the user's LDAP group memberships.
4. Keycloak sends the JWT access token back to the client application.
5. The client application includes the access token in its requests to the resource server.
6. The resource server validates the token and checks the user's group memberships to determine if access should be granted.

## Keycloak and Spring Boot Configuration

(Refer to the previous version for the configuration steps.)

## Spring Boot Starter

To facilitate the integration of Keycloak into future applications, we are developing a Spring Boot Starter. This starter will include the necessary dependencies and auto-configuration to connect to Keycloak and set up the OAuth2 resource server. It will also provide a simple way to secure application resources based on LDAP group memberships.

## Testing with Postman

(Refer to the previous version for the testing steps.)

## Onboarding Other Applications

Once the SSO platform is set up and the Spring Boot Starter is ready, onboarding other applications is straightforward:

1. Add the Spring Boot Starter to the application's dependencies.
2. Configure the application as a client in Keycloak.
3. Update the application's configuration to connect to the Keycloak server.
4. Use Spring Security annotations to secure resources based on LDAP group memberships.

With this setup, all applications in the organization will be able to authenticate users through a single sign-on process and grant access based on LDAP group memberships. This will simplify the management of user identities and access controls across multiple applications.

## Conclusion

With this setup, we have an SSO platform where users log in once through Keycloak, and their LDAP group memberships are used to control access to resources across all our applications. By developing a Spring Boot Starter, we make it easier for future applications to integrate with this platform, enhancing our organization's security and efficiency.


Here is a general outline that you can use for creating your Wiki:

# Single Sign-On (SSO) platform using Keycloak, LDAP, and Spring Boot

## Overview

This document provides a guide on how to set up an SSO platform using Keycloak as an Identity and Access Management solution, LDAP as a user directory, and Spring Boot for application development. This combination allows applications to authenticate users once and grant access based on their LDAP group memberships.

## Pre-requisites

- Keycloak Server
- LDAP Server
- Spring Boot Application
- Postman (for testing)

## Keycloak Configuration

### Setting up Realm

1. Log into the Keycloak Admin Console.
2. From the drop-down list in the top-left corner, select "Add Realm".
3. Enter a name for your realm (e.g., "Hydr").
4. Click "Create".

[Include screenshot here]

### User Federation with LDAP

1. In the new realm, go to "User Federation" in the left menu.
2. Select "ldap" from the "Add provider..." dropdown.
3. Fill out the settings to match your LDAP server, and click "Save".

[Include screenshot here]

### Group Mapping

1. Still under "User Federation", go to the "Mappers" tab for your LDAP configuration.
2. Click "Create", and select "group-ldap-mapper".
3. Fill out the settings to match your LDAP server, and click "Save".

[Include screenshot here]

### Client Configuration

1. Go to "Clients" in the left menu, and click "Create".
2. Enter a name for your client (e.g., "spring-boot-app").
3. Fill out the other settings as needed, and click "Save".

[Include screenshot here]

## Spring Boot Configuration

Your Spring Boot application needs to be configured to use Keycloak for authentication. You'll need the `spring-boot-starter-oauth2-resource-server` and `spring-security-oauth2-jose` dependencies in your `pom.xml` or `build.gradle` file. 

Here's an example configuration in `application.properties`:

```
spring.security.oauth2.resourceserver.jwt.jwk-set-uri=https://<keycloak-url>/auth/realms/<realm>/protocol/openid-connect/certs
spring.security.oauth2.resourceserver.jwt.issuer-uri=https://<keycloak-url>/auth/realms/<realm>
```

Replace `<keycloak-url>` with your Keycloak server's URL, and `<realm>` with the name of the realm you created.

In your security configuration, you should define the `JwtDecoder` bean:

```java
@Bean
JwtDecoder jwtDecoder(OAuth2ResourceServerProperties properties) {
    NimbusJwtDecoder jwtDecoder = NimbusJwtDecoder.withJwkSetUri(properties.getJwt().getJwkSetUri()).build();
    jwtDecoder.setJwtValidator(withIssuer(properties.getJwt().getIssuerUri()));
    return jwtDecoder;
}
```

## Testing with Postman

To test your setup, you can use Postman to generate an access token and send requests to your Spring Boot application.

1. To generate an access token, send a `POST` request to `https://<keycloak-url>/auth/realms/<realm>/protocol/openid-connect/token` with these parameters:
    - `grant_type`: "password"
    - `client_id`: "<client-id>"
    - `username`: "<username>"
    - `password`: "<password>"

2. Copy the access token from the response, and use it as a bearer token in your requests to your Spring Boot application.

[Include screenshot here]

## Conclusion

With this setup, you have an SSO platform where users log in once through Keycloak, and their

 confirmed as valid, the Spring Boot Application grants access to the Client Application.


Certainly, here's a high-level guide on how you've set up the Single Sign-On (SSO) system using Keycloak, LDAP and Spring Boot. This guide will explain how it has been configured and how it can be used for future applications.

**Configuration of Keycloak SSO:**

1. A realm was created in Keycloak. A realm manages a set of users, credentials, roles, and groups. 

2. An LDAP User Federation provider was added to the realm in Keycloak. This provider was configured to connect to the organization's LDAP server for authentication.

3. A group-ldap-mapper was added to the LDAP User Federation provider configuration. This mapper fetches group membership details from the LDAP server and makes these details available to Keycloak.

4. A client was created in the realm for the Spring Boot Application. The client was configured to use 'confidential' access type and client credentials were generated.

5. A 'groups' protocol mapper was added to the client. This mapper includes the groups a user belongs to in the JWT claim.

**Integration with Spring Boot Application:**

6. Spring Security and OAuth2 were integrated into the Spring Boot Application.

7. The application properties file was updated to include the realm, client id, client secret, and the keycloak server url.

8. The Spring Security configuration was updated to use the Keycloak configuration.

**Usage:**

1. A user sends an authentication request from the client application to Keycloak.

2. Keycloak uses the configured LDAP User Federation to authenticate the user against the LDAP server.

3. Once the user is authenticated, Keycloak issues a JWT which includes the user's groups as claims. This JWT is sent back to the client application.

4. The client application sends a request to the Spring Boot Application, including the JWT.

5. The Spring Boot Application uses Spring Security to validate the JWT against the public key of Keycloak and authorizes the user based on the user's group membership claims in the JWT.

**For Future Applications:**

To onboard a new application, follow these steps:

1. Create a new client in the realm in Keycloak.

2. Add the 'groups' protocol mapper to the client.

3. Configure the new application to use OAuth2 and Spring Security.

4. Update the new application's properties to include the realm, client id, client secret, and the keycloak server url.

5. Update the application's security configuration to use the Keycloak configuration.

The Spring Boot starter you're creating will encapsulate steps 3-5 above and simplify the onboarding of future applications.






apiVersion: apps/v1
kind: Deployment
metadata:
  name: ${app}
  namespace: ${namespace}
  labels:
    app: ${app}
spec:
  selector:
    matchLabels:
      app: ${app}
  replicas: 1
  template:
    metadata:
      labels:
        app: ${app}
      annotations:
        cluster-autoscaler.kubernetes.io/safe-to-evict: "true"
        seccomp.security.alpha.kubernetes.io/pod: 'runtime/default'
        seccomp.security.alpha.kubernetes.io/container: 'runtime/default'
    spec:
      containers:
        - name: ${app}
          image: asia.gcr.io/${project}/container/${image}
          imagePullPolicy: Always
          resources:
            requests:
              cpu: "100m"
              memory: "100Mi"
          securityContext:
            runAsNonRoot: true
            readOnlyRootFilesystem: true
            capabilities:
              drop:
              - ALL
            seccompProfile:
              type: RuntimeDefault
          env:
            - name: PROJECT
              value: ${project}
            - name: MANAGEMENT_METRICS_EXPORT_STACKDRIVER_ENABLED
              value: "false"
          ports:
            - name: http
              containerPort: 8080
          volumeMounts:
            - mountPath: /tmp
              name: tmp-volume
      volumes:
        - name: tmp-volume
          emptyDir: {}



