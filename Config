se#!/bin/bash

# Set variables
CONFIG_NAME="config-name"  # Replace with your config name
PROJECT_ID="project-id"  # Replace with your project id
CLUSTER_NAME="cluster-name"  # Replace with your cluster name
REGION="region"  # Replace with your region
SERVICE_ACCOUNT="service-account"  # Replace with your service account

# Create a new gcloud configuration
gcloud config configurations create ${CONFIG_NAME}

# Set gcloud configuration
gcloud config set proxy/address googleapis-dev.gcp.cloud.hk.hsbc
gcloud config set proxy/port 3128
gcloud config set proxy/type http_no_tunnel
gcloud config set project ${PROJECT_ID}
gcloud config set auth/impersonate_service_account ${SERVICE_ACCOUNT}

# Get Kubernetes credentials
gcloud container clusters get-credentials ${CLUSTER_NAME} --region ${REGION}

# Print all Kubernetes namespaces
kubectl get namespaces

gcloud config configurations activate config-name  # Replace with your config name
kubectl config use-context gke_project-id_region_cluster-name  # Replace with your project id, region, and cluster name

#!/bin/bash


apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  annotations:
    nginx.ingress.kubernetes.io/configuration-snippet: |
      proxy_set_header X-Forwarded-Host $host;
      proxy_set_header X-Forwarded-Proto $scheme;
  name: your-ingress
  namespace: your-namespace
spec:
  ...

# Set variables
CONFIG_NAME="config-name"  # Replace with your config name
PROJECT_ID="project-id"  # Replace with your project id
CLUSTER_NAME="cluster-name"  # Replace with your cluster name
REGION="region"  # Replace with your region
SERVICE_ACCOUNT="service-account"  # Replace with your service account
PROXY_URL="http://ingress.${CLUSTER_NAME}.hsbc-${PROJECT_ID}-gbmeqcomp-dev.dev.gcp.cloud.uk.hsbc:3128" # Replace with your proxy URL

# Create a new gcloud configuration
gcloud config configurations create ${CONFIG_NAME}

# Set gcloud configuration
gcloud config set proxy/address googleapis-dev.gcp.cloud.hk.hsbc
gcloud config set proxy/port 3128
gcloud config set proxy/type http_no_tunnel
gcloud config set project ${PROJECT_ID}
gcloud config set auth/impersonate_service_account ${SERVICE_ACCOUNT}

# Get Kubernetes credentials
gcloud container clusters get-credentials ${CLUSTER_NAME} --region ${REGION}

# Set kubectl config
kubectl config set clusters.gke_hsbc-${PROJECT_ID}-riskstore-dev_${REGION}_${CLUSTER_NAME}.proxy-url ${PROXY_URL}

# Print all Kubernetes namespaces
kubectl get namespaces


logging:
  level:
    com.google.cloud.spring.secretmanager: DEBUG



import subprocess

def copyImage(promote_from_project, __PROJECT__, _IMAGE_LOCATION__, __IMAGE_NAMESPACE__, __IMAGE_NAME__, __IMAGE_TAG__):
    __SOURCE_IMAGE__ = f"{_IMAGE_LOCATION__}/{promote_from_project}/{__IMAGE_NAMESPACE__}/{__IMAGE_NAME__}:{__IMAGE_TAG__}"
    __TARGET_IMAGE__ = f"{_IMAGE_LOCATION__}/{__PROJECT__}/{__IMAGE_NAMESPACE__}/{__IMAGE_NAME__}:{__IMAGE_TAG__}"

    return_output = ""
    return_output += subprocess.getoutput(f"docker pull {__SOURCE_IMAGE__}")
    return_output += subprocess.getoutput(f"docker tag {__SOURCE_IMAGE__} {__TARGET_IMAGE__}")
    return_output += subprocess.getoutput(f"docker push {__TARGET_IMAGE__}")

    return return_output

You can add these annotations directly to the Ingress resource YAML file, then apply the changes using `kubectl`.

1. First, you would add the annotations to your Ingress resource file. Here's an example:

```yaml
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  annotations:
    nginx.ingress.kubernetes.io/configuration-snippet: |
      proxy_set_header X-Forwarded-Host $host;
      proxy_set_header X-Forwarded-Proto $scheme;
  name: your-ingress
  namespace: your-namespace
spec:
  ...
```

2. Then you would apply the changes using `kubectl`. Save your file (let's call it `ingress.yaml`), then apply the changes with this command:

```bash
kubectl apply -f ingress.yaml
```

Note: Make sure to replace `your-ingress` and `your-namespace` with the actual name of your Ingress resource and the namespace it's in.

Alternatively, you can also edit the existing Ingress resource directly using `kubectl edit`. Here is how you would do it:

1. Use the following command to edit the Ingress:

```bash
kubectl edit ingress your-ingress -n your-namespace
```

2. This will open the existing Ingress configuration in your default text editor. Add the annotations under the `metadata:` section, then save and close the file. The changes will be applied immediately.

As of my knowledge cutoff in September 2021, the Google Cloud Console (web UI) does not support editing the raw YAML of Kubernetes resources. So, while you can view the YAML for a resource, you can't directly edit it. You would need to use `kubectl` or another Kubernetes client to apply these changes.

Remember to replace "your-ingress" and "your-namespace" with the actual name of your Ingress and the namespace it's in.


import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.stereotype.Component;

import javax.servlet.*;
import javax.servlet.http.HttpServletRequest;
import java.io.IOException;
import java.util.Enumeration;

@Component
public class LoggingFilter implements Filter {

    private static final Logger logger = LoggerFactory.getLogger(LoggingFilter.class);

    @Override
    public void doFilter(
      ServletRequest request, 
      ServletResponse response, 
      FilterChain chain) throws IOException, ServletException {
        
        HttpServletRequest req = (HttpServletRequest) request;
        Enumeration<String> headerNames = req.getHeaderNames();

        if (headerNames != null) {
                while (headerNames.hasMoreElements()) {
                    String name = headerNames.nextElement();
                    logger.info("Header: " + name + " = " + req.getHeader(name));
                }
        }

        chain.doFilter(request, response);
    }
}

